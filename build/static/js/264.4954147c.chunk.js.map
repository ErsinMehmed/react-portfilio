{"version":3,"file":"static/js/264.4954147c.chunk.js","mappings":"gKAGA,MAgBA,EAhByBA,IAAW,IAADC,EACjC,MAAOC,EAAKC,IAAUC,EAAAA,EAAAA,IAAU,CAC9BC,aAAa,IAGf,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAG,CACTN,IAAKA,EACLO,QAAS,CAAEC,EAAG,GAAIC,QAAS,GAC3BC,QAAST,EAAS,CAAEO,EAAG,EAAGC,QAAS,GAAM,CAAC,EAC1CE,WAAY,CAAEC,SAAU,IAAKC,MAAkB,QAAbd,EAAED,EAAMe,aAAK,IAAAd,EAAAA,EAAI,GAAIe,SACtDhB,EAAMgB,UACI,C,qFCXjB,MA+CA,EA/CaC,KAETC,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CACLC,QAAQ,yBACRC,OAAO,WAAUL,SAAA,EACjBV,EAAAA,EAAAA,KAACgB,EAAAA,EAAe,CAAAN,UACdE,EAAAA,EAAAA,MAAA,OAAKK,UAAU,gCAA+BP,SAAA,EAC5CV,EAAAA,EAAAA,KAAA,KAAGiB,UAAU,2BAA0BP,SAAC,sVAIxCV,EAAAA,EAAAA,KAAA,KAAGiB,UAAU,2BAA0BP,SAAC,4WAM5CE,EAAAA,EAAAA,MAACI,EAAAA,EAAe,CAAAN,SAAA,EACdV,EAAAA,EAAAA,KAAA,MAAIiB,UAAU,6EAA4EP,SAAC,gBAI3FV,EAAAA,EAAAA,KAAA,OAAKiB,UAAU,uEAAsEP,SAClFQ,EAAAA,GAAWC,KAAI,CAACC,EAAMC,KACrBrB,EAAAA,EAAAA,KAACgB,EAAAA,EAAe,CAEdP,MAAe,GAARY,EAAYX,UACnBE,EAAAA,EAAAA,MAAA,OAAKK,UAAS,QAAAK,OAAUF,EAAKG,MAAK,yBAAwBb,SAAA,EACxDV,EAAAA,EAAAA,KAACoB,EAAKI,KAAI,CAACP,UAAU,gDACrBL,EAAAA,EAAAA,MAAA,OAAKK,UAAU,YAAWP,SAAA,EACxBV,EAAAA,EAAAA,KAAA,MAAIiB,UAAU,mDAAkDP,SAC7DU,EAAKK,SAGRzB,EAAAA,EAAAA,KAAA,KAAGiB,UAAU,qDAAoDP,SAC9DU,EAAKM,cAVPL,Y,2MC3BbM,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBpB,KAAKoB,IACJ,MAAO,GAAPjB,OAAUiB,EAAG,KAAAjB,OACH,SAARiB,GArBWC,EAsBGN,EAAQM,OApBxBX,EAAQY,IAAID,KAChBT,GAAU,EACVF,EAAQa,IAAIF,EAAMT,EAAOY,aAFKd,EAAQe,IAAIJ,IADxB,IAsBRN,EAAQK,IAvBpB,IAAmBC,CAwBb,IAEDG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAb,EAAAc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBhB,EAEjB,GACyC,qBAAhCoB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtBxB,EAAQyB,UAAyBzB,EAAQyB,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,MAGT,CAEA,MAAM,GAAEU,EAAA,SAAIC,EAAA,SAAUC,GApFxB,SAAwBhC,GAEtB,MAAM8B,EAAK/B,EAAYC,GACvB,IAAIiC,EAAWxC,EAAYiB,IAAIoB,GAE/B,IAAKG,EAAU,CAEb,MAAMD,EAAW,IAAItC,IAErB,IAAIwC,EAEJ,MAAMH,EAAW,IAAIZ,sBAAsBgB,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAM3E,EACJ0E,EAAMf,gBACNY,EAAWK,MAAMd,GAAcY,EAAMb,mBAAqBC,IAGxDzB,EAAQwC,iBAA8C,qBAApBH,EAAMI,YAG1CJ,EAAMI,UAAY9E,GAGpB,OAAA2E,EAAAN,EAAStB,IAAI2B,EAAMd,UAAnBe,EAA4BF,SAASvB,IACnCA,EAASlD,EAAQ0E,EAAM,GACvB,GACF,GACDrC,GAGHkC,EACEH,EAASG,aACRQ,MAAMC,QAAQ3C,EAAQyB,WACnBzB,EAAQyB,UACR,CAACzB,EAAQyB,WAAa,IAE5BQ,EAAW,CACTH,KACAC,WACAC,YAGFvC,EAAYe,IAAIsB,EAAIG,EACtB,CAEA,OAAOA,CACT,CAmCqCW,CAAe5C,GAG5C6C,EAAYb,EAAStB,IAAIE,IAAY,GAQ3C,OAPKoB,EAASzB,IAAIK,IAChBoB,EAASxB,IAAII,EAASiC,GAGxBA,EAAUC,KAAKjC,GACfkB,EAASpB,QAAQC,GAEV,WAELiC,EAAUE,OAAOF,EAAUG,QAAQnC,GAAW,GAErB,IAArBgC,EAAU9B,SAEZiB,EAASiB,OAAOrC,GAChBmB,EAASmB,UAAUtC,IAGC,IAAlBoB,EAASmB,OAEXpB,EAASqB,aACT3D,EAAYwD,OAAOnB,GAEvB,CACF,CC1GkCuB,EAAAA,UC7B3B,SAASzF,IAWiC,IAXvB,UACxB6D,EAAA,MACAlD,EAAA,gBACAiE,EAAA,WACAc,EAAAhD,KACAA,EAAA,YACAzC,EAAA,KACA0F,EAAA,cACAC,EAAA,eACAvC,EAAA,SACAwC,GACF3C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAwB,EA+CE,MAAO5E,EAAKgG,GAAgBC,EAAAA,SAAyB,MAC/C9C,EAAiB8C,EAAAA,UAChBC,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9ChG,SAAU6F,EACVnB,WAAO,IAKTxB,EAASiD,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAAS7F,EAAK,OAElB,IAAIwF,EA4BJ,OA3BAA,EAAYvC,EACVjD,GACA,CAACC,EAAQ0E,KACPwB,EAAS,CACPlG,SACA0E,UAEExB,EAASiD,SAASjD,EAASiD,QAAQnG,EAAQ0E,GAE3CA,EAAMf,gBAAkBzD,GAAeqF,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE5C,OACAgD,aACA7B,YAEAe,kBAEAjE,SAEF0C,GAGK,KACDiC,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQlB,GAAaA,EAAUhB,WAAagB,EAClD/D,EACA4C,EACAgD,EACAzF,EACA0F,EACAf,EACAvB,EACA1C,IAIJ,MAAMwF,EAAc,OAAAzB,EAAAsB,EAAMvB,YAAN,EAAAC,EAAaf,OAC3ByC,EAA4BL,EAAAA,SAE/BjG,IACDqG,GACClG,GACA0F,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACPlG,SAAU6F,EACVnB,WAAO,KAIX,MAAM4B,EAAS,CAACP,EAAQE,EAAMjG,OAAQiG,EAAMvB,OAO5C,OAJA4B,EAAOvG,IAAMuG,EAAO,GACpBA,EAAOtG,OAASsG,EAAO,GACvBA,EAAO5B,MAAQ4B,EAAO,GAEfA,CACT,C","sources":["components/InViewAnimation.jsx","pages/Home.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import { useInView } from \"react-intersection-observer\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst InViewAnimation = (props) => {\r\n  const [ref, inView] = useInView({\r\n    triggerOnce: true,\r\n  });\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      initial={{ y: 50, opacity: 0 }}\r\n      animate={inView ? { y: 0, opacity: 1 } : {}}\r\n      transition={{ duration: 1.3, delay: props.delay ?? 0 }}>\r\n      {props.children}\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default InViewAnimation;\r\n","import Layout from \"../components/Layout\";\r\nimport InViewAnimation from \"../components/InViewAnimation\";\r\nimport { mainSkills } from \"../Data\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Layout\r\n      classes='px-6 md:px-10 lg:px-14'\r\n      header='About Me'>\r\n      <InViewAnimation>\r\n        <div className='pt-5 w-full space-y-2.5 pr-10'>\r\n          <p className='text-[#44566c] leading-7'>\r\n            Hi, my name is Ersin, and I am a software developer and sports coach. I have been programming for 5 years, combining my passion for technology with professional experience. Over the years, Iâ€™ve honed my skills by working on various projects, both at work and in my spare time, constantly striving to deliver high-quality solutions.\r\n          </p>\r\n\r\n          <p className='text-[#44566c] leading-7'>\r\n           I have both theoretical and practical expertise in back-end and front-end programming, with a strong focus on web development. Web programming is my greatest strength, and I continuously work on refining my skills in this area. On this site, you can explore more details about my work, including the developments and projects I am currently involved in.\r\n          </p>\r\n        </div>\r\n      </InViewAnimation>\r\n\r\n      <InViewAnimation>\r\n        <h3 className='font-bold text-2xl sm:text-3xl text-slate-700 flex items-center mt-12 mb-5'>\r\n          What I do!\r\n        </h3>\r\n\r\n        <div className='grid gap-7 grid-cols-1 md:grid-cols-2 lg:grid-cols-1 2xl:grid-cols-2'>\r\n          {mainSkills.map((item, index) => (\r\n            <InViewAnimation\r\n              key={index}\r\n              delay={index * 0.2}>\r\n              <div className={`flex ${item.color} gap-4 rounded-xl p-6`}>\r\n                <item.icon className='w-6 h-6 sm:w-8 sm:h-8 flex-shrink-0 mt-0.5' />\r\n                <div className='space-y-2'>\r\n                  <h3 className='text-xl sm:text-2xl font-semibold text-slate-700'>\r\n                    {item.title}\r\n                  </h3>\r\n\r\n                  <p className='text-[#44566C] text-sm sm:text-[15px] text-justify'>\r\n                    {item.text}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </InViewAnimation>\r\n          ))}\r\n        </div>\r\n      </InViewAnimation>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["props","_props$delay","ref","inView","useInView","triggerOnce","_jsx","motion","div","initial","y","opacity","animate","transition","duration","delay","children","Home","_jsxs","Layout","classes","header","InViewAnimation","className","mainSkills","map","item","index","concat","color","icon","title","text","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}